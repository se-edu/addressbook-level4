/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */
 
plugins {
    id "com.github.kt3k.coveralls" version "2.4.0"
    id "com.github.johnrengelman.shadow" version '1.2.3'
}

allprojects {
    version = 'V1.6.1ea'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '6.19'
        sourceSets = [project.sourceSets.main]
    }
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    findbugs {
        excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    // This part is similar to global variables
    // Access them by using double-quoted strings (GStrings) and referencing by $ e.g. "Variable contains $Variable"
    project.ext {
        controlsFxVersion = '8.40.11'
        guavaVersion = '19.0'
        jacksonVersion = '2.7.0'
        jacksonDataTypeVersion = '2.7.4'
        junitVersion = '4.12'
        testFxVersion = '3.1.0'
        monocleVersion = '1.8.0_20'

        libDir = 'lib'
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    dependencies {
        compile "org.controlsfx:controlsfx:$controlsFxVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        compile "com.google.guava:guava:$guavaVersion"

        testCompile "junit:junit:$junitVersion"
        testCompile "org.testfx:testfx-core:4.0.+"
        testCompile "org.testfx:testfx-junit:4.0.+"
        testCompile "org.testfx:testfx-legacy:4.0.+", {
            exclude group: "junit", module: "junit"
        }
        testCompile "org.testfx:openjfx-monocle:$monocleVersion"
    }
    
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
    }
    
    shadowJar {
        archiveName = "addressbook.jar"

        manifest {
            attributes "Main-Class": "seedu.address.MainApp"
        }

        destinationDir = file("${buildDir}/jar/")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task checkStyle { // A dummy task to run a set of tasks
}

class AddressBookTest extends Test {
    public AddressBookTest() {
    	  forkEvery = 1
        systemProperty 'testfx.setup.timeout', '60000'
    }

    public void setHeadless() {
        systemProperty 'java.awt.robot', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'prism.order', 'sw'
        systemProperty 'prism.text', 't2k'
    }
}

task guiTests(type: AddressBookTest) {
    include 'guitests/**'

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task guiUnitTests(type: AddressBookTest) {
    include 'guiunittests/**'

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task unitTests(type: AddressBookTest) {
    include 'seedu/address/**'

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

// Test mode depends on whether headless task has been run
task allTests(type: AddressBookTest) {
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task headless << {
    println "Setting headless mode properties."
    guiTests.setHeadless()
    guiUnitTests.setHeadless()
    unitTests.setHeadless()
    allTests.setHeadless()
}



// Makes sure that headless properties are set before running tests
unitTests.mustRunAfter headless
guiUnitTests.mustRunAfter headless
guiTests.mustRunAfter headless
allTests.mustRunAfter headless

headless.shouldRunAfter checkStyle
unitTests.shouldRunAfter checkStyle
guiUnitTests.shouldRunAfter checkStyle
guiTests.shouldRunAfter checkStyle
allTests.shouldRunAfter checkStyle

checkStyle.shouldRunAfter clean
checkStyle.dependsOn checkstyleMain, checkstyleTest, findbugsMain, findbugsTest, pmdMain, pmdTest

defaultTasks 'clean', 'headless', 'allTests', 'coverage'
